* =asm=, the assembler for TinyCPU
An example program accepted by =asm= is reproduced below:
#+begin_src txt
  load_arr_0:
          LDI array          # An interesting note about the design of labels in
          LDI array          # the assembler is that doing this lets me load a pointer.
          SWAB
          SWMB               # rM now has &(array[0]).
          LDM                # Should have array[0] == 42 in rA

  halt:
          JU halt

  array:
          .word 42
#+end_src

This program demonstrates the primary features of =asm=: comments,
labels, indirect loads (loading label addresses), and jumps to labels.

** Usage
#+begin_src sh
  asm file.s [-o output_file]
#+end_src

If =output_file= isn't provided, the output binary is written to
=a.out=. This command line interface is stable.

** Notes on the assembler
*** Rules
Any violations of the rules below is undefined behavior, though most
of these should be caught by the assembler.

- Comments start with =#= and end with the newline character.
- Labels must end in =:=. *A label must be the only thing on its line
  (other than comments).*
- Label naming rules follow the [[https://docs.python.org/3/reference/lexical_analysis.html#identifiers][syntax rules for Python identifiers]].
- Immediates for =LDI= and literals for =.word= may be in any base
  Python supports, with the same syntax (=0x=, =0b=, =0o=, and
  decimal).

*** On Label Jumps
Jumps to labels add extra code to actually compute the address and
jump there --- exactly five instructions are added prior to any
label jump to achieve this. This is relevant if you're wondering why
your code size is more than expected.
